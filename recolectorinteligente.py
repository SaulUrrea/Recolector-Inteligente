# -*- coding: utf-8 -*-
"""RecolectorInteligente.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nN3e2Kucb2wUF3QY-Nw2AAe2mFSav8FA
"""

!pip install gradio

## Instalamos las librerias correspondientes para nuestro proyecto

##Libreria para el input de los datos
import gradio as gr 

##Librerias para visualizacion y correcion de los datos
import matplotlib.pyplot as plt
import numpy as np
import os
import PIL

##Libreria para el la creacion y entrenamiento de nuestro modelo
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.models import Sequential
from tensorflow.keras.optimizers import Adam

##Empezamos cargando nuestro grupo de datos
##Formateamos nuestras imagenes en tama√±o 180x180px
img_height,img_width=180,180
batch_size=32

##Dividimos los datos de entrenamiento y de test

train_ds = tf.keras.preprocessing.image_dataset_from_directory(
  './dataset',
  validation_split=0.2,
  subset="training",
  seed=123,
  image_size=(img_height, img_width),
  batch_size=batch_size)

val_ds = tf.keras.preprocessing.image_dataset_from_directory(
  './dataset',
  validation_split=0.2,
  subset="validation",
  seed=123,
  image_size=(img_height, img_width),
  batch_size=batch_size)

##Visualizamos las clases de los datos
class_names = train_ds.class_names
print(class_names)

import matplotlib.pyplot as plt

##Visualizamos los datos

plt.figure(figsize=(10, 10))
for images, labels in train_ds.take(1):
  for i in range(9):
    ax = plt.subplot(3, 3, i + 1)
    plt.imshow(images[i].numpy().astype("uint8"))
    plt.title(class_names[labels[i]])
    plt.axis("off")

num_classes = 6

##Creamos nuestro modelo

model = Sequential([
  layers.experimental.preprocessing.Rescaling(1./255, input_shape=(img_height, img_width, 3)),
  layers.Conv2D(16, 3, padding='same', activation='relu'),
  layers.MaxPooling2D(),
  layers.Conv2D(32, 3, padding='same', activation='relu'),
  layers.MaxPooling2D(),
  layers.Conv2D(64, 3, padding='same', activation='relu'),
  layers.MaxPooling2D(),
  layers.Flatten(),
  layers.Dense(128, activation='relu'),
  layers.Dense(num_classes,activation='softmax')
])

model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

history = model.fit(
  train_ds,
  validation_data=val_ds,
  epochs=10
)

def predict_image(img):
  img_4d=img.reshape(-1,180,180,3)
  prediction=model.predict(img_4d)[0]
  return {class_names[i]: float(prediction[i]) for i in range(5)}

image = gr.inputs.Image(shape=(180,180))
label = gr.outputs.Label(num_top_classes=5)

gr.Interface(fn=predict_image, inputs=image, outputs=label,interpretation='default').launch(debug='True')

def video_flip(video):
  return video

demo = gr.Interface(video_flip, gr.Video(), "playable_video")

demo.launch()